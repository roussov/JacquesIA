{"ast":null,"code":"var _jsxFileName = \"/Users/vincent.rs/git-vince/JacquesIA/client/src/contexts/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuthStore } from '../stores/authStore';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    token,\n    user,\n    isAuthenticated\n  } = useAuthStore();\n\n  // Initialiser la connexion WebSocket\n  useEffect(() => {\n    if (!isAuthenticated || !token || !user) {\n      return;\n    }\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    const newSocket = io(SOCKET_URL, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Gestionnaires d'événements de connexion\n    newSocket.on('connect', () => {\n      console.log('✅ WebSocket connecté');\n      setIsConnected(true);\n      toast.success('Connexion temps réel établie');\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('❌ WebSocket déconnecté:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // Déconnexion forcée par le serveur\n        toast.error('Connexion fermée par le serveur');\n      } else if (reason === 'transport close') {\n        // Perte de connexion réseau\n        toast.error('Connexion réseau perdue');\n      }\n    });\n    newSocket.on('connect_error', error => {\n      console.error('❌ Erreur de connexion WebSocket:', error);\n      setIsConnected(false);\n      toast.error('Erreur de connexion temps réel');\n    });\n    newSocket.on('reconnect', attemptNumber => {\n      console.log(`✅ WebSocket reconnecté (tentative ${attemptNumber})`);\n      setIsConnected(true);\n      toast.success('Connexion rétablie');\n    });\n    newSocket.on('reconnect_error', error => {\n      console.error('❌ Erreur de reconnexion:', error);\n    });\n    newSocket.on('reconnect_failed', () => {\n      console.error('❌ Échec de reconnexion WebSocket');\n      toast.error('Impossible de rétablir la connexion');\n    });\n\n    // Gestionnaires d'événements personnalisés\n    newSocket.on('connection_established', data => {\n      console.log('🎉 Connexion WebSocket établie:', data);\n    });\n    newSocket.on('error', error => {\n      console.error('❌ Erreur WebSocket:', error);\n      toast.error(error.message || 'Erreur de connexion');\n    });\n\n    // Gestionnaires pour les messages de chat\n    newSocket.on('new_chat_message', message => {\n      console.log('💬 Nouveau message de chat:', message);\n      // Émettre un événement personnalisé pour que les composants puissent l'écouter\n      window.dispatchEvent(new CustomEvent('newChatMessage', {\n        detail: message\n      }));\n    });\n    newSocket.on('user_typing', data => {\n      console.log('⌨️ Utilisateur en train de taper:', data);\n      window.dispatchEvent(new CustomEvent('userTyping', {\n        detail: data\n      }));\n    });\n\n    // Gestionnaires pour le débogage\n    newSocket.on('debug_update', data => {\n      console.log('🐛 Mise à jour de débogage:', data);\n      window.dispatchEvent(new CustomEvent('debugUpdate', {\n        detail: data\n      }));\n    });\n\n    // Gestionnaires pour l'exécution de code\n    newSocket.on('code_execution_status', data => {\n      console.log('⚡ Statut d\\'exécution de code:', data);\n      window.dispatchEvent(new CustomEvent('codeExecutionStatus', {\n        detail: data\n      }));\n    });\n    newSocket.on('code_execution_complete', data => {\n      console.log('✅ Exécution de code terminée:', data);\n      window.dispatchEvent(new CustomEvent('codeExecutionComplete', {\n        detail: data\n      }));\n    });\n\n    // Gestionnaires pour les notifications\n    newSocket.on('notification', notification => {\n      console.log('🔔 Notification:', notification);\n      toast(notification.message, {\n        icon: notification.type === 'success' ? '✅' : notification.type === 'error' ? '❌' : 'ℹ️'\n      });\n    });\n\n    // Ping périodique pour maintenir la connexion\n    const pingInterval = setInterval(() => {\n      if (newSocket.connected) {\n        newSocket.emit('ping');\n      }\n    }, 30000);\n    newSocket.on('pong', data => {\n      console.log('🏓 Pong reçu:', data);\n    });\n    setSocket(newSocket);\n\n    // Nettoyage\n    return () => {\n      clearInterval(pingInterval);\n      newSocket.close();\n      setSocket(null);\n      setIsConnected(false);\n    };\n  }, [isAuthenticated, token, user]);\n\n  // Fonctions utilitaires\n  const joinChatSession = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('join_chat_session', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const leaveChatSession = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('leave_chat_session', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const sendChatMessage = useCallback((sessionId, message, role = 'user') => {\n    if (socket && isConnected) {\n      socket.emit('chat_message', {\n        sessionId,\n        message,\n        role\n      });\n    }\n  }, [socket, isConnected]);\n  const joinDebugSession = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('join_debug_session', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const leaveDebugSession = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('leave_debug_session', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const sendDebugUpdate = useCallback((sessionId, type, payload) => {\n    if (socket && isConnected) {\n      socket.emit('debug_update', {\n        sessionId,\n        type,\n        payload\n      });\n    }\n  }, [socket, isConnected]);\n  const startTyping = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('typing_start', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const stopTyping = useCallback(sessionId => {\n    if (socket && isConnected) {\n      socket.emit('typing_stop', {\n        sessionId\n      });\n    }\n  }, [socket, isConnected]);\n  const contextValue = {\n    socket,\n    isConnected,\n    joinChatSession,\n    leaveChatSession,\n    sendChatMessage,\n    joinDebugSession,\n    leaveDebugSession,\n    sendDebugUpdate,\n    startTyping,\n    stopTyping\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personnalisé pour écouter les événements WebSocket\n_s2(SocketProvider, \"rcJMet/2lyStKvQ6Wxn9wE1gq7s=\", false, function () {\n  return [useAuthStore];\n});\n_c = SocketProvider;\nexport const useSocketEvent = (eventName, handler) => {\n  _s3();\n  useEffect(() => {\n    const handleEvent = event => {\n      handler(event.detail);\n    };\n    window.addEventListener(eventName, handleEvent);\n    return () => {\n      window.removeEventListener(eventName, handleEvent);\n    };\n  }, [eventName, handler]);\n};\n_s3(useSocketEvent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","io","useAuthStore","toast","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","token","user","isAuthenticated","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","newSocket","auth","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","success","reason","error","attemptNumber","data","message","window","dispatchEvent","CustomEvent","detail","notification","icon","type","pingInterval","setInterval","connected","emit","clearInterval","close","joinChatSession","sessionId","leaveChatSession","sendChatMessage","role","joinDebugSession","leaveDebugSession","sendDebugUpdate","payload","startTyping","stopTyping","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocketEvent","eventName","handler","_s3","handleEvent","event","addEventListener","removeEventListener","$RefreshReg$"],"sources":["/Users/vincent.rs/git-vince/JacquesIA/client/src/contexts/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { io, Socket } from 'socket.io-client';\nimport { useAuthStore } from '../stores/authStore';\nimport toast from 'react-hot-toast';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  joinChatSession: (sessionId: string) => void;\n  leaveChatSession: (sessionId: string) => void;\n  sendChatMessage: (sessionId: string, message: string, role?: string) => void;\n  joinDebugSession: (sessionId: string) => void;\n  leaveDebugSession: (sessionId: string) => void;\n  sendDebugUpdate: (sessionId: string, type: string, payload: any) => void;\n  startTyping: (sessionId: string) => void;\n  stopTyping: (sessionId: string) => void;\n}\n\nconst SocketContext = createContext<SocketContextType | null>(null);\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\ninterface SocketProviderProps {\n  children: React.ReactNode;\n}\n\nexport const SocketProvider: React.FC<SocketProviderProps> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const { token, user, isAuthenticated } = useAuthStore();\n\n  // Initialiser la connexion WebSocket\n  useEffect(() => {\n    if (!isAuthenticated || !token || !user) {\n      return;\n    }\n\n    const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    \n    const newSocket = io(SOCKET_URL, {\n      auth: {\n        token: token,\n      },\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n    });\n\n    // Gestionnaires d'événements de connexion\n    newSocket.on('connect', () => {\n      console.log('✅ WebSocket connecté');\n      setIsConnected(true);\n      toast.success('Connexion temps réel établie');\n    });\n\n    newSocket.on('disconnect', (reason) => {\n      console.log('❌ WebSocket déconnecté:', reason);\n      setIsConnected(false);\n      \n      if (reason === 'io server disconnect') {\n        // Déconnexion forcée par le serveur\n        toast.error('Connexion fermée par le serveur');\n      } else if (reason === 'transport close') {\n        // Perte de connexion réseau\n        toast.error('Connexion réseau perdue');\n      }\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('❌ Erreur de connexion WebSocket:', error);\n      setIsConnected(false);\n      toast.error('Erreur de connexion temps réel');\n    });\n\n    newSocket.on('reconnect', (attemptNumber) => {\n      console.log(`✅ WebSocket reconnecté (tentative ${attemptNumber})`);\n      setIsConnected(true);\n      toast.success('Connexion rétablie');\n    });\n\n    newSocket.on('reconnect_error', (error) => {\n      console.error('❌ Erreur de reconnexion:', error);\n    });\n\n    newSocket.on('reconnect_failed', () => {\n      console.error('❌ Échec de reconnexion WebSocket');\n      toast.error('Impossible de rétablir la connexion');\n    });\n\n    // Gestionnaires d'événements personnalisés\n    newSocket.on('connection_established', (data) => {\n      console.log('🎉 Connexion WebSocket établie:', data);\n    });\n\n    newSocket.on('error', (error) => {\n      console.error('❌ Erreur WebSocket:', error);\n      toast.error(error.message || 'Erreur de connexion');\n    });\n\n    // Gestionnaires pour les messages de chat\n    newSocket.on('new_chat_message', (message) => {\n      console.log('💬 Nouveau message de chat:', message);\n      // Émettre un événement personnalisé pour que les composants puissent l'écouter\n      window.dispatchEvent(new CustomEvent('newChatMessage', { detail: message }));\n    });\n\n    newSocket.on('user_typing', (data) => {\n      console.log('⌨️ Utilisateur en train de taper:', data);\n      window.dispatchEvent(new CustomEvent('userTyping', { detail: data }));\n    });\n\n    // Gestionnaires pour le débogage\n    newSocket.on('debug_update', (data) => {\n      console.log('🐛 Mise à jour de débogage:', data);\n      window.dispatchEvent(new CustomEvent('debugUpdate', { detail: data }));\n    });\n\n    // Gestionnaires pour l'exécution de code\n    newSocket.on('code_execution_status', (data) => {\n      console.log('⚡ Statut d\\'exécution de code:', data);\n      window.dispatchEvent(new CustomEvent('codeExecutionStatus', { detail: data }));\n    });\n\n    newSocket.on('code_execution_complete', (data) => {\n      console.log('✅ Exécution de code terminée:', data);\n      window.dispatchEvent(new CustomEvent('codeExecutionComplete', { detail: data }));\n    });\n\n    // Gestionnaires pour les notifications\n    newSocket.on('notification', (notification) => {\n      console.log('🔔 Notification:', notification);\n      toast(notification.message, {\n        icon: notification.type === 'success' ? '✅' : notification.type === 'error' ? '❌' : 'ℹ️',\n      });\n    });\n\n    // Ping périodique pour maintenir la connexion\n    const pingInterval = setInterval(() => {\n      if (newSocket.connected) {\n        newSocket.emit('ping');\n      }\n    }, 30000);\n\n    newSocket.on('pong', (data) => {\n      console.log('🏓 Pong reçu:', data);\n    });\n\n    setSocket(newSocket);\n\n    // Nettoyage\n    return () => {\n      clearInterval(pingInterval);\n      newSocket.close();\n      setSocket(null);\n      setIsConnected(false);\n    };\n  }, [isAuthenticated, token, user]);\n\n  // Fonctions utilitaires\n  const joinChatSession = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('join_chat_session', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const leaveChatSession = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('leave_chat_session', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const sendChatMessage = useCallback((sessionId: string, message: string, role: string = 'user') => {\n    if (socket && isConnected) {\n      socket.emit('chat_message', { sessionId, message, role });\n    }\n  }, [socket, isConnected]);\n\n  const joinDebugSession = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('join_debug_session', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const leaveDebugSession = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('leave_debug_session', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const sendDebugUpdate = useCallback((sessionId: string, type: string, payload: any) => {\n    if (socket && isConnected) {\n      socket.emit('debug_update', { sessionId, type, payload });\n    }\n  }, [socket, isConnected]);\n\n  const startTyping = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('typing_start', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const stopTyping = useCallback((sessionId: string) => {\n    if (socket && isConnected) {\n      socket.emit('typing_stop', { sessionId });\n    }\n  }, [socket, isConnected]);\n\n  const contextValue: SocketContextType = {\n    socket,\n    isConnected,\n    joinChatSession,\n    leaveChatSession,\n    sendChatMessage,\n    joinDebugSession,\n    leaveDebugSession,\n    sendDebugUpdate,\n    startTyping,\n    stopTyping,\n  };\n\n  return (\n    <SocketContext.Provider value={contextValue}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\n// Hook personnalisé pour écouter les événements WebSocket\nexport const useSocketEvent = (eventName: string, handler: (data: any) => void) => {\n  useEffect(() => {\n    const handleEvent = (event: CustomEvent) => {\n      handler(event.detail);\n    };\n\n    window.addEventListener(eventName, handleEvent as EventListener);\n\n    return () => {\n      window.removeEventListener(eventName, handleEvent as EventListener);\n    };\n  }, [eventName, handler]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}