{"ast":null,"code":"var _jsxFileName = \"/Users/vincent.rs/git-vince/JacquesIA/client/src/components/Auth/GoogleAuth.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleButton = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin: ${({\n  theme\n}) => theme.spacing[4]} 0;\n`;\n_c = GoogleButton;\nconst Divider = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({\n  theme\n}) => theme.spacing[4]} 0;\n  \n  &::before,\n  &::after {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: ${({\n  theme\n}) => theme.colors.border.primary};\n  }\n  \n  span {\n    padding: 0 ${({\n  theme\n}) => theme.spacing[4]};\n    color: ${({\n  theme\n}) => theme.colors.text.secondary};\n    font-size: ${({\n  theme\n}) => theme.typography.fontSize.sm};\n  }\n`;\n_c2 = Divider;\nconst GoogleAuth = ({\n  onSuccess,\n  onError,\n  text = \"Se connecter avec Google\"\n}) => {\n  _s();\n  const googleButtonRef = useRef(null);\n  useEffect(() => {\n    const initializeGoogleSignIn = () => {\n      if (window.google && googleButtonRef.current) {\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n          callback: response => {\n            if (response.credential) {\n              onSuccess(response.credential);\n            } else {\n              onError(new Error('Aucun credential reçu de Google'));\n            }\n          },\n          auto_select: false,\n          cancel_on_tap_outside: true\n        });\n        window.google.accounts.id.renderButton(googleButtonRef.current, {\n          theme: 'outline',\n          size: 'large',\n          width: '100%',\n          text: text === \"Se connecter avec Google\" ? 'signin_with' : 'signup_with',\n          shape: 'rectangular',\n          logo_alignment: 'left'\n        });\n      }\n    };\n\n    // Vérifier si le script Google est déjà chargé\n    if (window.google) {\n      initializeGoogleSignIn();\n    } else {\n      // Attendre que le script soit chargé\n      const checkGoogleLoaded = setInterval(() => {\n        if (window.google) {\n          clearInterval(checkGoogleLoaded);\n          initializeGoogleSignIn();\n        }\n      }, 100);\n\n      // Nettoyer l'intervalle après 10 secondes\n      setTimeout(() => {\n        clearInterval(checkGoogleLoaded);\n      }, 10000);\n    }\n  }, [onSuccess, onError, text]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Divider, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"ou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GoogleButton, {\n      ref: googleButtonRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(GoogleAuth, \"Kzz2eu0c18yhyzuk+uIYl3ADcvo=\");\n_c3 = GoogleAuth;\nexport default GoogleAuth;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GoogleButton\");\n$RefreshReg$(_c2, \"Divider\");\n$RefreshReg$(_c3, \"GoogleAuth\");","map":{"version":3,"names":["React","useEffect","useRef","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleButton","div","theme","spacing","_c","Divider","colors","border","primary","text","secondary","typography","fontSize","sm","_c2","GoogleAuth","onSuccess","onError","_s","googleButtonRef","initializeGoogleSignIn","window","google","current","accounts","id","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","response","credential","Error","auto_select","cancel_on_tap_outside","renderButton","size","width","shape","logo_alignment","checkGoogleLoaded","setInterval","clearInterval","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c3","$RefreshReg$"],"sources":["/Users/vincent.rs/git-vince/JacquesIA/client/src/components/Auth/GoogleAuth.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nconst GoogleButton = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin: ${({ theme }) => theme.spacing[4]} 0;\n`;\n\nconst Divider = styled.div`\n  display: flex;\n  align-items: center;\n  margin: ${({ theme }) => theme.spacing[4]} 0;\n  \n  &::before,\n  &::after {\n    content: '';\n    flex: 1;\n    height: 1px;\n    background: ${({ theme }) => theme.colors.border.primary};\n  }\n  \n  span {\n    padding: 0 ${({ theme }) => theme.spacing[4]};\n    color: ${({ theme }) => theme.colors.text.secondary};\n    font-size: ${({ theme }) => theme.typography.fontSize.sm};\n  }\n`;\n\ninterface GoogleAuthProps {\n  onSuccess: (credential: string) => void;\n  onError: (error: any) => void;\n  text?: string;\n}\n\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\nconst GoogleAuth: React.FC<GoogleAuthProps> = ({ onSuccess, onError, text = \"Se connecter avec Google\" }): JSX.Element => {\n  const googleButtonRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const initializeGoogleSignIn = () => {\n      if (window.google && googleButtonRef.current) {\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n          callback: (response: any) => {\n            if (response.credential) {\n              onSuccess(response.credential);\n            } else {\n              onError(new Error('Aucun credential reçu de Google'));\n            }\n          },\n          auto_select: false,\n          cancel_on_tap_outside: true,\n        });\n\n        window.google.accounts.id.renderButton(googleButtonRef.current, {\n          theme: 'outline',\n          size: 'large',\n          width: '100%',\n          text: text === \"Se connecter avec Google\" ? 'signin_with' : 'signup_with',\n          shape: 'rectangular',\n          logo_alignment: 'left',\n        });\n      }\n    };\n\n    // Vérifier si le script Google est déjà chargé\n    if (window.google) {\n      initializeGoogleSignIn();\n    } else {\n      // Attendre que le script soit chargé\n      const checkGoogleLoaded = setInterval(() => {\n        if (window.google) {\n          clearInterval(checkGoogleLoaded);\n          initializeGoogleSignIn();\n        }\n      }, 100);\n\n      // Nettoyer l'intervalle après 10 secondes\n      setTimeout(() => {\n        clearInterval(checkGoogleLoaded);\n      }, 10000);\n    }\n  }, [onSuccess, onError, text]);\n\n  return (\n    <>\n      <Divider>\n        <span>ou</span>\n      </Divider>\n      <GoogleButton ref={googleButtonRef} />\n    </>\n  );\n};\n\nexport default GoogleAuth;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}